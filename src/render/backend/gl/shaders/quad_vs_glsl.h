char *quad_vs_glsl = 
"#version 450 core\n"
// Per-instance vertex attributes
"layout (location = 0)  in vec4 a_rect;\n"
"layout (location = 1)  in vec4 a_uv_rect;\n"
"layout (location = 2)  in vec4 a_c0;\n"
"layout (location = 3)  in vec4 a_c1;\n"
"layout (location = 4)  in vec4 a_c2;\n"
"layout (location = 5)  in vec4 a_c3;\n"
"layout (location = 6)  in float a_theta;\n"
"layout (location = 7)  in float a_radius;\n"
"layout (location = 8)  in int a_sample_mode;\n"
"layout (location = 9)  in float a_border_thickness;\n"
"layout (location = 10) in float a_corner_softness;\n"
"layout (location = 11) in vec4 a_clip_rect;\n"
// Vertex shader outputs
"out vec4     v_uv_rect;\n" 
"out vec4     v_c0;\n"
"out vec4     v_c1;\n"
"out vec4     v_c2;\n"
"out vec4     v_c3;\n"
"out float    v_radius;\n"
"out flat int v_sample_mode;\n"
"out float    v_border_thickness;\n"
"out float    v_corner_softness;\n"
"out vec4     v_clip_rect;\n"
"out vec2     v_rect_center;\n"
"out vec2     v_rect_half_dim;\n"
"out vec2     v_pos;\n"
"out float    v_theta;\n"
"out gl_PerVertex { vec4 gl_Position; };\n"
// Constants and uniforms
"vec2 vertices[6] = {\n"
"  {-1.f, +1.f}, {+1.f, +1.f}, {-1.f, -1.f},\n"
"  {+1.f, +1.f}, {-1.f, -1.f}, {+1.f, -1.f},\n"
"};\n"
"layout (location = 0) uniform vec2 u_res;\n"

"void main()\n"
"{\n"
"  int v_idx = gl_VertexID;\n"
"  vec2 v = vertices[v_idx];\n"
"  vec4 rect = a_rect;\n"
"  rect.y = -rect.y + u_res.y;\n"
"  rect.w = -rect.w + u_res.y;\n"
"  vec2 center = (rect.xy + rect.zw) * 0.5;\n"
"  vec2 half_dim = (rect.zy - rect.xw) * 0.5;\n"
"  vec2 q = center + half_dim * v;\n"
#if 0
// Clamp to exact pixel coordinates
"  if (v.x < 0.0) q.x = floor(q.x);\n"
"  else           q.x = ceil(q.x); \n"
"  if (v.y < 0.0) q.y = floor(q.y);\n"
"  else           q.y = ceil(q.y); \n"
#endif
// Rotation
"  vec2 qr = q - center;\n"
"  float s = sin(a_theta);\n"
"  float c = cos(a_theta);\n"
"  vec2 pr = mat2(c,s,-s,c) * qr;\n"
// Compute vertex shader outputs
"  vec2 p = center + pr;\n"
"  vec2 clip_p = vec2(\n"
"    2.0 * p.x / u_res.x - 1.0,\n"
"    2.0 * p.y / u_res.y - 1.0\n"
"  );\n"
"  gl_Position        = vec4(clip_p, 0., 1.);\n"
"  v_uv_rect          = a_uv_rect;\n"
"  v_c0               = a_c0;\n"
"  v_c1               = a_c1;\n"
"  v_c2               = a_c2;\n"
"  v_c3               = a_c3;\n"
"  v_radius           = a_radius;\n"
"  v_sample_mode      = a_sample_mode;\n"
"  v_clip_rect        = a_clip_rect;\n"
"  v_border_thickness = a_border_thickness;\n"
"  v_corner_softness  = a_corner_softness;\n"
"  v_rect_center      = center;\n"
"  v_rect_half_dim    = half_dim;\n"
"  v_pos              = q;\n"
"  v_theta            = a_theta;\n"
"}\n";
